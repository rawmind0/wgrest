// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Manage WireGuard VPN tunnels by RESTful manner",
    "title": "wgrest",
    "version": "v1.0"
  },
  "paths": {
    "/devices/": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "get wireguard devices",
        "operationId": "DeviceList",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WireguardDevice"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "create new wireguard device",
        "operationId": "DeviceCreate",
        "parameters": [
          {
            "description": "device configuration",
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WireguardDevice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "409": {
            "description": "device exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{dev}": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "get wireguard device details",
        "operationId": "DeviceGet",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/WireguardDevice"
            }
          },
          "404": {
            "description": "not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "delete wireguard interface",
        "operationId": "DeviceDelete",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{dev}/peers/": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "get wireguard device's peers",
        "operationId": "PeerList",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WireguardPeer"
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "add peer to wireguard device",
        "operationId": "PeerCreate",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          },
          {
            "description": "peer configuration",
            "name": "peer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WireguardPeer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "device not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{dev}/peers/{peer_id}": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "wireguard peer's detail",
        "operationId": "PeerGet",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "peer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/WireguardPeer"
            }
          },
          "404": {
            "description": "peer/device not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "delete wireguard's peer",
        "operationId": "PeerDelete",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "peer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "detail": {
          "type": "string"
        }
      }
    },
    "WireguardDevice": {
      "type": "object",
      "required": [
        "name",
        "listen_port",
        "private_key",
        "network"
      ],
      "properties": {
        "listen_port": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "private_key": {
          "type": "string",
          "minLength": 32
        },
        "public_key": {
          "type": "string",
          "minLength": 32,
          "readOnly": true
        }
      }
    },
    "WireguardPeer": {
      "type": "object",
      "required": [
        "public_key"
      ],
      "properties": {
        "allowed_ips": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "end_point": {
          "type": "string"
        },
        "peer_id": {
          "type": "string",
          "readOnly": true
        },
        "preshared_key": {
          "type": "string",
          "minLength": 32
        },
        "private_key": {
          "type": "string",
          "minLength": 32
        },
        "public_key": {
          "type": "string",
          "minLength": 32
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "Token",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Manage WireGuard VPN tunnels by RESTful manner",
    "title": "wgrest",
    "version": "v1.0"
  },
  "paths": {
    "/devices/": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "get wireguard devices",
        "operationId": "DeviceList",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WireguardDevice"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "create new wireguard device",
        "operationId": "DeviceCreate",
        "parameters": [
          {
            "description": "device configuration",
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WireguardDevice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "409": {
            "description": "device exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{dev}": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "get wireguard device details",
        "operationId": "DeviceGet",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/WireguardDevice"
            }
          },
          "404": {
            "description": "not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "delete wireguard interface",
        "operationId": "DeviceDelete",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{dev}/peers/": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "get wireguard device's peers",
        "operationId": "PeerList",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WireguardPeer"
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "add peer to wireguard device",
        "operationId": "PeerCreate",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          },
          {
            "description": "peer configuration",
            "name": "peer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WireguardPeer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "device not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{dev}/peers/{peer_id}": {
      "get": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "wireguard peer's detail",
        "operationId": "PeerGet",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "peer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/WireguardPeer"
            }
          },
          "404": {
            "description": "peer/device not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "key": []
          }
        ],
        "tags": [
          "wireguard"
        ],
        "summary": "delete wireguard's peer",
        "operationId": "PeerDelete",
        "parameters": [
          {
            "type": "string",
            "name": "dev",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "peer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "detail": {
          "type": "string"
        }
      }
    },
    "WireguardDevice": {
      "type": "object",
      "required": [
        "name",
        "listen_port",
        "private_key",
        "network"
      ],
      "properties": {
        "listen_port": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "private_key": {
          "type": "string",
          "minLength": 32
        },
        "public_key": {
          "type": "string",
          "minLength": 32,
          "readOnly": true
        }
      }
    },
    "WireguardPeer": {
      "type": "object",
      "required": [
        "public_key"
      ],
      "properties": {
        "allowed_ips": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "end_point": {
          "type": "string"
        },
        "peer_id": {
          "type": "string",
          "readOnly": true
        },
        "preshared_key": {
          "type": "string",
          "minLength": 32
        },
        "private_key": {
          "type": "string",
          "minLength": 32
        },
        "public_key": {
          "type": "string",
          "minLength": 32
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "Token",
      "in": "header"
    }
  }
}`))
}
